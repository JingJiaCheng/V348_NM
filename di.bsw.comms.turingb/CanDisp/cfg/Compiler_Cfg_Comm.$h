
#ifndef COMPILER_CFG_H
#define COMPILER_CFG_H

/** \brief compiler abstraction header
 **
 ** This file contains compiler specific declarations for the
 ** platform using the compiler GHS for ARM architectures
 **
 ** It contains module specific memory and pointer classes
 **
 ** See "Specification of Compiler Abstraction".
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL40-DRV
 **
 ** (c) Copyright Spansion LLC, All Rights Reserved 2014-2015
 **
 ** ALL RIGHTS RESERVED. No part of this publication may be copied and provided
 ** to any third party in any form or by any means, unless expressly agreed to
 ** in written form by Spansion. All trademarks used in this document are the
 ** property of their respective owners.
 **
 ** For further provisions please refer to the respective License Agreement.
*/



/*==================[inclusions]=============================================*/

/*==================[macros]=================================================*/

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined CAN_CODE) /* to prevent double definition */
#error CAN_CODE already defined
#endif /* if (defined CAN_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CAN_CODE

#if (defined CAN_CONST) /* to prevent double definition */
#error CAN_CONST already defined
#endif /* if (defined CAN_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CAN_CONST

#if (defined CAN_DATA) /* to prevent double definition */
#error CAN_DATA already defined
#endif /* if (defined CAN_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CAN_DATA

#if (defined CAN_APPL_DATA) /* to prevent double definition */
#error CAN_APPL_DATA already defined
#endif /* if (defined CAN_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CAN_APPL_DATA

#if (defined CAN_APPL_CONST) /* to prevent double definition */
#error CAN_APPL_CONST already defined
#endif /* if (defined CAN_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CAN_APPL_CONST

#if (defined CAN_APPL_CODE) /* to prevent double definition */
#error CAN_APPL_CODE already defined
#endif /* if (defined CAN_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define CAN_APPL_CODE

#if (defined CAN_CALLOUT_CODE) /* to prevent double definition */
#error CAN_CALLOUT_CODE already defined
#endif /* if (defined CAN_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define CAN_CALLOUT_CODE

#if (defined CAN_VAR_NOINIT) /* to prevent double definition */
#error CAN_VAR_NOINIT already defined
#endif /* if (defined CAN_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define CAN_VAR_NOINIT

#if (defined CAN_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CAN_VAR_POWER_ON_INIT already defined
#endif /* if (defined CAN_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define CAN_VAR_POWER_ON_INIT

#if (defined CAN_VAR_FAST) /* to prevent double definition */
#error CAN_VAR_FAST already defined
#endif /* if (defined CAN_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define CAN_VAR_FAST

#if (defined CAN_VAR) /* to prevent double definition */
#error CAN_VAR already defined
#endif /* if (defined CAN_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define CAN_VAR

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined CANDISP_CODE) /* to prevent double definition */
#error CANDISP_CODE already defined
#endif /* if (defined CANDISP_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CANDISP_CODE

#if (defined CANDISP_CONST) /* to prevent double definition */
#error CANDISP_CONST already defined
#endif /* if (defined CANDISP_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CANDISP_CONST

#if (defined CANDISP_APPL_DATA) /* to prevent double definition */
#error CANDISP_APPL_DATA already defined
#endif /* if (defined CANDISP_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CANDISP_APPL_DATA

#if (defined CANDISP_APPL_CONST) /* to prevent double definition */
#error CANDISP_APPL_CONST already defined
#endif /* if (defined CANDISP_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CANDISP_APPL_CONST

#if (defined CANDISP_APPL_CODE) /* to prevent double definition */
#error CANDISP_APPL_CODE already defined
#endif /* if (defined CANDISP_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define CANDISP_APPL_CODE

#if (defined CANDISP_CALLOUT_CODE) /* to prevent double definition */
#error CANDISP_CALLOUT_CODE already defined
#endif /* if (defined CANDISP_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define CANDISP_CALLOUT_CODE

#if (defined CANDISP_VAR_NOINIT) /* to prevent double definition */
#error CANDISP_VAR_NOINIT already defined
#endif /* if (defined CANDISP_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define CANDISP_VAR_NOINIT

#if (defined CANDISP_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANDISP_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANDISP_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define CANDISP_VAR_POWER_ON_INIT

#if (defined CANDISP_VAR_FAST) /* to prevent double definition */
#error CANDISP_VAR_FAST already defined
#endif /* if (defined CANDISP_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define CANDISP_VAR_FAST

#if (defined CANDISP_VAR) /* to prevent double definition */
#error CANDISP_VAR already defined
#endif /* if (defined CANDISP_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define CANDISP_VAR

#define CANDISP_APPL_STATE_VAR

/**********************************************************************************************************************
  \def  Memory mapping keywords
**********************************************************************************************************************/
#define CANDISP_XCFG                                         CANDISP_CONST
#define CANDISP_VAR_XCFG_NOINIT                              CANDISP_VAR_NOINIT
#define CANDISP_APPL_MSG_CODE
#define CANDISP_UL_STANDARD_VAR

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined CANNM_CODE) /* to prevent double definition */
#error CANNM_CODE already defined
#endif /* if (defined CANNM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CANNM_CODE

#if (defined CANNM_CONST) /* to prevent double definition */
#error CANNM_CONST already defined
#endif /* if (defined CANNM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CANNM_CONST

#if (defined CANNM_APPL_DATA) /* to prevent double definition */
#error CANNM_APPL_DATA already defined
#endif /* if (defined CANNM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CANNM_APPL_DATA

#if (defined CANNM_APPL_CONST) /* to prevent double definition */
#error CANNM_APPL_CONST already defined
#endif /* if (defined CANNM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CANNM_APPL_CONST

#if (defined CANNM_APPL_CODE) /* to prevent double definition */
#error CANNM_APPL_CODE already defined
#endif /* if (defined CANNM_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define CANNM_APPL_CODE

#if (defined CANNM_CALLOUT_CODE) /* to prevent double definition */
#error CANNM_CALLOUT_CODE already defined
#endif /* if (defined CANNM_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define CANNM_CALLOUT_CODE

#if (defined CANNM_VAR_NOINIT) /* to prevent double definition */
#error CANNM_VAR_NOINIT already defined
#endif /* if (defined CANNM_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define CANNM_VAR_NOINIT

#if (defined CANNM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANNM_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANNM_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define CANNM_VAR_POWER_ON_INIT

#if (defined CANNM_VAR_FAST) /* to prevent double definition */
#error CANNM_VAR_FAST already defined
#endif /* if (defined CANNM_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define CANNM_VAR_FAST

#if (defined CANNM_VAR) /* to prevent double definition */
#error CANNM_VAR already defined
#endif /* if (defined CANNM_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define CANNM_VAR

/**********************************************************************************************************************
 *  CAN NM APPLICATION MACROS
 *********************************************************************************************************************/
#define CANNM_APPL_VAR


/*------------------[memory and pointer class of a module]-------------------*/

#if (defined CANTP_CODE) /* to prevent double definition */
#error CANTP_CODE already defined
#endif /* if (defined CANTP_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CANTP_CODE

#if (defined CANTP_CONST) /* to prevent double definition */
#error CANTP_CONST already defined
#endif /* if (defined CANTP_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CANTP_CONST

#if (defined CANTP_APPL_DATA) /* to prevent double definition */
#error CANTP_APPL_DATA already defined
#endif /* if (defined CANTP_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CANTP_APPL_DATA

#if (defined CANTP_APPL_CONST) /* to prevent double definition */
#error CANTP_APPL_CONST already defined
#endif /* if (defined CANTP_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CANTP_APPL_CONST

#if (defined CANTP_APPL_CODE) /* to prevent double definition */
#error CANTP_APPL_CODE already defined
#endif /* if (defined CANTP_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define CANTP_APPL_CODE

#if (defined CANTP_CALLOUT_CODE) /* to prevent double definition */
#error CANTP_CALLOUT_CODE already defined
#endif /* if (defined CANTP_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define CANTP_CALLOUT_CODE

#if (defined CANTP_VAR_NOINIT) /* to prevent double definition */
#error CANTP_VAR_NOINIT already defined
#endif /* if (defined CANTP_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define CANTP_VAR_NOINIT

#if (defined CANTP_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANTP_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANTP_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define CANTP_VAR_POWER_ON_INIT

#if (defined CANTP_VAR_FAST) /* to prevent double definition */
#error CANTP_VAR_FAST already defined
#endif /* if (defined CANTP_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define CANTP_VAR_FAST

#if (defined CANTP_VAR) /* to prevent double definition */
#error CANTP_VAR already defined
#endif /* if (defined CANTP_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define CANTP_VAR

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined CANXCVR_CODE) /* to prevent double definition */
#error CANXCVR_CODE already defined
#endif /* if (defined CANXCVR_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CANXCVR_CODE

#if (defined CANXCVR_CONST) /* to prevent double definition */
#error CANXCVR_CONST already defined
#endif /* if (defined CANTRCV_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CANXCVR_CONST

#if (defined CANXCVR_APPL_DATA) /* to prevent double definition */
#error CANXCVR_APPL_DATA already defined
#endif /* if (defined CANXCVR_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CANXCVR_APPL_DATA

#if (defined CANXCVR_APPL_CONST) /* to prevent double definition */
#error CANXCVR_APPL_CONST already defined
#endif /* if (defined CANXCVR_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CANXCVR_APPL_CONST

#if (defined CANXCVR_APPL_CODE) /* to prevent double definition */
#error CANXCVR_APPL_CODE already defined
#endif /* if (defined CANXCVR_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define CANXCVR_APPL_CODE

#if (defined CANXCVR_CALLOUT_CODE) /* to prevent double definition */
#error CANXCVR_CALLOUT_CODE already defined
#endif /* if (defined CANXCVR_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define CANXCVR_CALLOUT_CODE

#if (defined CANXCVR_VAR_NOINIT) /* to prevent double definition */
#error CANXCVR_VAR_NOINIT already defined
#endif /* if (defined CANXCVR_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define CANXCVR_VAR_NOINIT

#if (defined CANXCVR_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANXCVR_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANXCVR_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define CANXCVR_VAR_POWER_ON_INIT

#if (defined CANXCVR_VAR_FAST) /* to prevent double definition */
#error CANXCVR_VAR_FAST already defined
#endif /* if (defined CANXCVR_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define CANXCVR_VAR_FAST

#if (defined CANXCVR_VAR) /* to prevent double definition */
#error CANXCVR_VAR already defined
#endif /* if (defined CANXCVR_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define CANXCVR_VAR

/*------------------[memory and pointer class of a module]-------------------*/


#if (defined CCL_CODE) /* to prevent double definition */
#error CCL_CODE already defined
#endif /* if (defined CCL_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CCL_CODE

#if (defined CCL_CONST) /* to prevent double definition */
#error CCL_CONST already defined
#endif /* if (defined CCL_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CCL_CONST

#if (defined CCL_APPL_DATA) /* to prevent double definition */
#error CCL_APPL_DATA already defined
#endif /* if (defined CCL_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CCL_APPL_DATA

#if (defined CCL_APPL_CONST) /* to prevent double definition */
#error CCL_APPL_CONST already defined
#endif /* if (defined CCL_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CCL_APPL_CONST

#if (defined CCL_APPL_CODE) /* to prevent double definition */
#error CCL_APPL_CODE already defined
#endif /* if (defined CCL_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define CCL_APPL_CODE

#if (defined CCL_CALLOUT_CODE) /* to prevent double definition */
#error CCL_CALLOUT_CODE already defined
#endif /* if (defined CCL_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define CCL_CALLOUT_CODE

#if (defined CCL_VAR_NOINIT) /* to prevent double definition */
#error CCL_VAR_NOINIT already defined
#endif /* if (defined CCL_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define CCL_VAR_NOINIT

#if (defined CCL_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CCL_VAR_POWER_ON_INIT already defined
#endif /* if (defined CCL_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define CCL_VAR_POWER_ON_INIT

#if (defined CCL_VAR_FAST) /* to prevent double definition */
#error CCL_VAR_FAST already defined
#endif /* if (defined CCL_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define CCL_VAR_FAST

#if (defined CCL_VAR) /* to prevent double definition */
#error CCL_VAR already defined
#endif /* if (defined CCL_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define CCL_VAR

/**********************************************************************************************************************
 *  Ccl START 
 *********************************************************************************************************************/

/* Module Constant Data of the Postbuild Configuration */
#define CCL_PBCFG
/* Module Var Data of the Postbuild Configuration */
#define CCL_VAR_PBCFG

/* Module Variables which are initialized by call of Com_Init() */
#define CCL_VAR_ZERO_INIT
/* Module Variables which are initialized by call of Com_Init() */
#define CCL_VAR_INIT

/* Application Buffer which is located in RAM */
#define CCL_APPL_VAR

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined CCLMGR_CODE) /* to prevent double definition */
#error CCLMGR_CODE already defined
#endif /* if (defined CCLMGR_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CCLMGR_CODE

#if (defined CCLMGR_CONST) /* to prevent double definition */
#error CCLMGR_CONST already defined
#endif /* if (defined CCLMGR_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CCLMGR_CONST

#if (defined CCLMGR_APPL_DATA) /* to prevent double definition */
#error CCLMGR_APPL_DATA already defined
#endif /* if (defined CCLMGR_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CCLMGR_APPL_DATA

#if (defined CCLMGR_APPL_CONST) /* to prevent double definition */
#error CCLMGR_APPL_CONST already defined
#endif /* if (defined CCLMGR_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CCLMGR_APPL_CONST

#if (defined CCLMGR_APPL_CODE) /* to prevent double definition */
#error CCLMGR_APPL_CODE already defined
#endif /* if (defined CCLMGR_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define CCLMGR_APPL_CODE

#if (defined CCLMGR_CALLOUT_CODE) /* to prevent double definition */
#error CCLMGR_CALLOUT_CODE already defined
#endif /* if (defined CCLMGR_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define CCLMGR_CALLOUT_CODE

#if (defined CCLMGR_VAR_NOINIT) /* to prevent double definition */
#error CCLMGR_VAR_NOINIT already defined
#endif /* if (defined CCLMGR_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define CCLMGR_VAR_NOINIT

#if (defined CCLMGR_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CCLMGR_VAR_POWER_ON_INIT already defined
#endif /* if (defined CCLMGR_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define CCLMGR_VAR_POWER_ON_INIT

#if (defined CCLMGR_VAR_FAST) /* to prevent double definition */
#error CCLMGR_VAR_FAST already defined
#endif /* if (defined CCLMGR_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define CCLMGR_VAR_FAST

#if (defined CCLMGR_VAR) /* to prevent double definition */
#error CCLMGR_VAR already defined
#endif /* if (defined CCLMGR_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define CCLMGR_VAR

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined GW_CODE) /* to prevent double definition */
#error GW_CODE already defined
#endif /* if (defined GW_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define GW_CODE

#if (defined GW_CONST) /* to prevent double definition */
#error GW_CONST already defined
#endif /* if (defined GW_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define GW_CONST

#if (defined GW_APPL_DATA) /* to prevent double definition */
#error GW_APPL_DATA already defined
#endif /* if (defined GW_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define GW_APPL_DATA

#if (defined GW_APPL_CONST) /* to prevent double definition */
#error GW_APPL_CONST already defined
#endif /* if (defined GW_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define GW_APPL_CONST

#if (defined GW_APPL_CODE) /* to prevent double definition */
#error GW_APPL_CODE already defined
#endif /* if (defined GW_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define GW_APPL_CODE

#if (defined GW_CALLOUT_CODE) /* to prevent double definition */
#error GW_CALLOUT_CODE already defined
#endif /* if (defined GW_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define GW_CALLOUT_CODE

#if (defined GW_VAR_NOINIT) /* to prevent double definition */
#error GW_VAR_NOINIT already defined
#endif /* if (defined GW_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define GW_VAR_NOINIT

#if (defined GW_VAR_POWER_ON_INIT) /* to prevent double definition */
#error GW_VAR_POWER_ON_INIT already defined
#endif /* if (defined GW_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define GW_VAR_POWER_ON_INIT

#if (defined GW_VAR_FAST) /* to prevent double definition */
#error GW_VAR_FAST already defined
#endif /* if (defined GW_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define GW_VAR_FAST

#if (defined GW_VAR) /* to prevent double definition */
#error GW_VAR already defined
#endif /* if (defined GW_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define GW_VAR

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined LIN_CODE) /* to prevent double definition */
#error LIN_CODE already defined
#endif /* if (defined LIN_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define LIN_CODE

#if (defined LIN_CONST) /* to prevent double definition */
#error LIN_CONST already defined
#endif /* if (defined LIN_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define LIN_CONST


#if (defined LIN_DATA) /* to prevent double definition */
#error LIN_DATA already defined
#endif /* if (defined ICU_DATA) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define LIN_DATA



#if (defined LIN_APPL_DATA) /* to prevent double definition */
#error LIN_APPL_DATA already defined
#endif /* if (defined LIN_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define LIN_APPL_DATA

#if (defined LIN_APPL_CONST) /* to prevent double definition */
#error LIN_APPL_CONST already defined
#endif /* if (defined LIN_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define LIN_APPL_CONST

#if (defined LIN_APPL_CODE) /* to prevent double definition */
#error LIN_APPL_CODE already defined
#endif /* if (defined LIN_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define LIN_APPL_CODE

#if (defined LIN_CALLOUT_CODE) /* to prevent double definition */
#error LIN_CALLOUT_CODE already defined
#endif /* if (defined LIN_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define LIN_CALLOUT_CODE

#if (defined LIN_VAR_NOINIT) /* to prevent double definition */
#error LIN_VAR_NOINIT already defined
#endif /* if (defined LIN_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define LIN_VAR_NOINIT

#if (defined LIN_VAR_POWER_ON_INIT) /* to prevent double definition */
#error LIN_VAR_POWER_ON_INIT already defined
#endif /* if (defined LIN_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define LIN_VAR_POWER_ON_INIT

#if (defined LIN_VAR_FAST) /* to prevent double definition */
#error LIN_VAR_FAST already defined
#endif /* if (defined LIN_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define LIN_VAR_FAST

#if (defined LIN_VAR) /* to prevent double definition */
#error LIN_VAR already defined
#endif /* if (defined LIN_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define LIN_VAR

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined LINDISP_CODE) /* to prevent double definition */
#error LINDISP_CODE already defined
#endif /* if (defined LINDISP_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define LINDISP_CODE

#if (defined LINDISP_CONST) /* to prevent double definition */
#error LINDISP_CONST already defined
#endif /* if (defined LINDISP_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define LINDISP_CONST

#if (defined LINDISP_APPL_DATA) /* to prevent double definition */
#error LINDISP_APPL_DATA already defined
#endif /* if (defined LINDISP_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define LINDISP_APPL_DATA

#if (defined LINDISP_APPL_CONST) /* to prevent double definition */
#error LINDISP_APPL_CONST already defined
#endif /* if (defined LINDISP_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define LINDISP_APPL_CONST

#if (defined LINDISP_APPL_CODE) /* to prevent double definition */
#error LINDISP_APPL_CODE already defined
#endif /* if (defined LINDISP_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define LINDISP_APPL_CODE

#if (defined LINDISP_CALLOUT_CODE) /* to prevent double definition */
#error LINDISP_CALLOUT_CODE already defined
#endif /* if (defined LINDISP_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define LINDISP_CALLOUT_CODE

#if (defined LINDISP_VAR_NOINIT) /* to prevent double definition */
#error LINDISP_VAR_NOINIT already defined
#endif /* if (defined LINDISP_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define LINDISP_VAR_NOINIT

#if (defined LINDISP_VAR_POWER_ON_INIT) /* to prevent double definition */
#error LINDISP_VAR_POWER_ON_INIT already defined
#endif /* if (defined LINDISP_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define LINDISP_VAR_POWER_ON_INIT

#if (defined LINDISP_VAR_FAST) /* to prevent double definition */
#error LINDISP_VAR_FAST already defined
#endif /* if (defined LINDISP_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define LINDISP_VAR_FAST

#if (defined LINDISP_VAR) /* to prevent double definition */
#error LINDISP_VAR already defined
#endif /* if (defined LINDISP_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define LINDISP_VAR

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined NM_CODE) /* to prevent double definition */
#error NM_CODE already defined
#endif /* if (defined NM_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define NM_CODE

#if (defined NM_CONST) /* to prevent double definition */
#error NM_CONST already defined
#endif /* if (defined NM_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define NM_CONST

#if (defined NM_APPL_DATA) /* to prevent double definition */
#error NM_APPL_DATA already defined
#endif /* if (defined NM_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define NM_APPL_DATA

#if (defined NM_APPL_CONST) /* to prevent double definition */
#error NM_APPL_CONST already defined
#endif /* if (defined NM_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define NM_APPL_CONST

#if (defined NM_APPL_CODE) /* to prevent double definition */
#error NM_APPL_CODE already defined
#endif /* if (defined NM_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define NM_APPL_CODE

#if (defined NM_CALLOUT_CODE) /* to prevent double definition */
#error NM_CALLOUT_CODE already defined
#endif /* if (defined NM_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define NM_CALLOUT_CODE

#if (defined NM_VAR_NOINIT) /* to prevent double definition */
#error NM_VAR_NOINIT already defined
#endif /* if (defined NM_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define NM_VAR_NOINIT

#if (defined NM_VAR_POWER_ON_INIT) /* to prevent double definition */
#error NM_VAR_POWER_ON_INIT already defined
#endif /* if (defined NM_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define NM_VAR_POWER_ON_INIT

#if (defined NM_VAR_FAST) /* to prevent double definition */
#error NM_VAR_FAST already defined
#endif /* if (defined NM_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define NM_VAR_FAST

#if (defined NM_VAR) /* to prevent double definition */
#error NM_VAR already defined
#endif /* if (defined NM_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define NM_VAR

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined XCP_CODE) /* to prevent double definition */
#error XCP_CODE already defined
#endif /* if (defined XCP_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define XCP_CODE

#if (defined XCP_CONST) /* to prevent double definition */
#error XCP_CONST already defined
#endif /* if (defined XCP_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define XCP_CONST

#if (defined XCP_APPL_DATA) /* to prevent double definition */
#error XCP_APPL_DATA already defined
#endif /* if (defined XCP_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define XCP_APPL_DATA

#if (defined XCP_APPL_CONST) /* to prevent double definition */
#error XCP_APPL_CONST already defined
#endif /* if (defined XCP_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define XCP_APPL_CONST

#if (defined XCP_APPL_CODE) /* to prevent double definition */
#error XCP_APPL_CODE already defined
#endif /* if (defined XCP_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define XCP_APPL_CODE

#if (defined XCP_CALLOUT_CODE) /* to prevent double definition */
#error XCP_CALLOUT_CODE already defined
#endif /* if (defined XCP_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define XCP_CALLOUT_CODE

#if (defined XCP_VAR_NOINIT) /* to prevent double definition */
#error XCP_VAR_NOINIT already defined
#endif /* if (defined XCP_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define XCP_VAR_NOINIT

#if (defined XCP_VAR_POWER_ON_INIT) /* to prevent double definition */
#error XCP_VAR_POWER_ON_INIT already defined
#endif /* if (defined XCP_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define XCP_VAR_POWER_ON_INIT

#if (defined XCP_VAR_FAST) /* to prevent double definition */
#error XCP_VAR_FAST already defined
#endif /* if (defined XCP_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define XCP_VAR_FAST

#if (defined XCP_VAR) /* to prevent double definition */
#error XCP_VAR already defined
#endif /* if (defined XCP_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define XCP_VAR

/*------------------[memory and pointer class of a module]-------------------*/

#if (defined CANXCP_CODE) /* to prevent double definition */
#error CANXCP_CODE already defined
#endif /* if (defined CANXCP_CODE) */

/** \brief definition of the code memory class
 **
 ** To be used for code. */
#define CANXCP_CODE

#if (defined CANXCP_CONST) /* to prevent double definition */
#error CANXCP_CONST already defined
#endif /* if (defined CANXCP_CONST) */

/** \brief definition of the constant memory class
 **
 ** To be used for global or static constants. */
#define CANXCP_CONST

#if (defined CANXCP_APPL_DATA) /* to prevent double definition */
#error CANXCP_APPL_DATA already defined
#endif /* if (defined CANXCP_APPL_DATA) */

/** \brief definition of the application data pointer class
 **
 ** To be used for references on application data (expected to
 ** be in RAM or ROM) passed via API. */
#define CANXCP_APPL_DATA

#if (defined CANXCP_APPL_CONST) /* to prevent double definition */
#error CANXCP_APPL_CONST already defined
#endif /* if (defined CANXCP_APPL_CONST) */

/** \brief definition of the constant pointer class
 **
 ** To be used for references on application constants (expected to
 ** be certainly in ROM, for instance pointer of Init() function)
 ** passed via API. */
#define CANXCP_APPL_CONST

#if (defined CANXCP_APPL_CODE) /* to prevent double definition */
#error CANXCP_APPL_CODE already defined
#endif /* if (defined CANXCP_APPL_CODE) */

/** \brief definition of a code pointer class
 **
 ** To be used for references on application functions
 ** (e.g. call back function pointers). */
#define CANXCP_APPL_CODE

#if (defined CANXCP_CALLOUT_CODE) /* to prevent double definition */
#error CANXCP_CALLOUT_CODE already defined
#endif /* if (defined CANXCP_CALLOUT_CODE) */

/** \briefdefinition of the application function variable memory class*/
#define CANXCP_CALLOUT_CODE

#if (defined CANXCP_VAR_NOINIT) /* to prevent double definition */
#error CANXCP_VAR_NOINIT already defined
#endif /* if (defined CANXCP_VAR_NOINIT) */

/** \brief definition of the noinit variable memory class
 **
 ** To be used for all global or static variables that are
 ** never initialized. */
#define CANXCP_VAR_NOINIT

#if (defined CANXCP_VAR_POWER_ON_INIT) /* to prevent double definition */
#error CANXCP_VAR_POWER_ON_INIT already defined
#endif /* if (defined CANXCP_VAR_POWER_ON_INIT) */

/** \brief definition of a power on init variable memory class
 **
 ** To be used for all global or static variables that are initialized
 ** only after power on reset. */
#define CANXCP_VAR_POWER_ON_INIT

#if (defined CANXCP_VAR_FAST) /* to prevent double definition */
#error CANXCP_VAR_FAST already defined
#endif /* if (defined CANXCP_VAR_FAST) */

/** \brief definition of a fast variable memory class
 **
 ** To be used for all global or static variables that have at least one
 ** of the following properties:
 ** - accessed bitwise
 ** - frequently used
 ** - high number of accesses in source code */
#define CANXCP_VAR_FAST

#if (defined CANXCP_VAR) /* to prevent double definition */
#error CANXCP_VAR already defined
#endif /* if (defined CANXCP_VAR) */

/** \brief definition of a variable memory class
 **
 ** To be used for global or static variables that are initialized
 ** after every reset. */
#define CANXCP_VAR

/**********************************************************************************************************************
 *  CAN XCP APPLICATION MACROS
 *********************************************************************************************************************/

#define CANXCP_PBCFG
#define CANXCP_APPL_VAR

/*==================[type definitions]=======================================*/

/*==================[external function declarations]=========================*/

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

/****************************HISTORY*****************************************/
/****************************************************************************
Date              : 11/21/2016
By                : cmurali1
Change Description: Migrated to BAIC requirements
*****************************************************************************/

#endif /* ifndef COMPILER_CFG_COMM_H */

