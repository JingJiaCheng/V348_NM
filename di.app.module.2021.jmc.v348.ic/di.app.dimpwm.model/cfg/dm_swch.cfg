/*============================================================================
**
**                     CONFIDENTIAL VISTEON CORPORATION
**
** This is an unpublished work of authorship, which contains trade secrets,
** created in 2001. Visteon Corporation owns all rights to this work and
** intends to maintain it in confidence to preserve its trade secret status.
** Visteon Corporation reserves the right, under the copyright laws of the
** United States or those of any other country that may have jurisdiction,
** to protect this work as an unpublished work, in the event of an
** inadvertent or deliberate unauthorized publication. Visteon Corporation
** also reserves its rights under all copyright laws to protect this work as
** a published work, when appropriate. Those having access to this work may
** not copy it, use it, modify it or disclose the information contained in
** it without the written authorization of Visteon Corporation.
**
**============================================================================
**
** Name:           dm_swch.cfg
**
** Description:    Configuration file for the switch event manager.
**
** Organization:   Driver Information Software Section,
**                 DI Core Engineering Department
**
**============================================================================
**
**  $Archive:   J:/arch/00diaps_/src/dm_swch$.cfv  $.cfv  $.cfv  $
** $Revision:   1.2  $
**     $Date:   15 Oct 2001 08:24:00  $
**  $Modtime:   12 Oct 2001 15:03:20  $
**   $Author:   jkanoza  $
**
**==========================================================================*/
#ifndef DM_SWCH_CFG
#define DM_SWCH_CFG

/*
** DM_SWCH_USE_DEFAULTS_FOR_COMPILE - Define to non zero to compile with
** out defining the following macros. Set to 0 once integrated with
** application software.
*/
#define DM_SWCH_USE_DEFAULTS_TO_COMPILE 0

/*============================================================================
** I N C L U D E   F I L E S
**==========================================================================*/

#include "Compiler.h"
#include "system.h"

#include "BtnMdl.h"


/*
** If you intend to call the "dm_switch_check_for_events()" at a periodic
** rate (typically 100ms), then #define SWITCH_MANAGER_CALLED_PERIODICALLY,
** and define the SWITCH_MANAGER_PERIOD_RATE_IN_MS.
**
** If you do not intend to call the function at a periodic basis, do not
** #define SWITCH_MANAGER_CALLED_PERIODICALLY, but still #define
** SWITCH_MANAGER_PERIOD_RATE_IN_MS.  When you choose this option,
** you must add "switch_manager_KSWTIMER" to SWTMR.CFG, and know that
** the timer base that will be used is 4ms.
**
** #define SWITCH_MANAGER_CALLED_PERIODICALLY
** #define SWITCH_MANAGER_PERIOD_RATE_IN_MS    (100)
*/

#define SWITCH_MANAGER_CALLED_PERIODICALLY
#define SWITCH_MANAGER_PERIOD_RATE_IN_MS    (30)

/*
** Define the value used by your system that indicates no event.  Typically,
** this value is equated to DE_NONE which has a value of 0.
**
** #define NO_SWITCH_EVENT_TO_BE_POSTED (DE_NONE)
*/

#define NO_SWITCH_EVENT_TO_BE_POSTED ((UINT8)HMI_BTN_EV_NONE)

/*
** Define a function to be called whenever a switch event is to be posted.
** This function should return TRUE if the event was successfully queued,
** else it should return FALSE.  Also, the function should take a UINT8
** parameter which is the event to be posted.
**
** For products using the "dm_queue.c" code package, this should be
** defined as:  #define REPORT_SWITCH_EVENT() dm_queue_post_event()
**
** For products using DMS-02 or DMS-03 code packages, this should be
** defined as:  #define REPORT_SWITCH_EVENT() dms_report_button_event()
**
** At the top of this file, make sure to include the header file that
** contains the prototype for the function that you have selected here.
**
** #define REPORT_SWITCH_EVENT(x) dm_queue_post_event(x)
*/

#define REPORT_SWITCH_EVENT(x) BtnMdl_report_button_event(x)

/*
** This config item defines the number of switches in the
** dm_switch_array[].  This array is extern'ed by the package
** and the user is expected to allocate and initialize this
** array.
**
** #define  DM_SWITCH_NUM_ENTRY_IN_CFG_TBL (6)
*/

#define  DM_SWITCH_NUM_ENTRY_IN_CFG_TBL (9)

/*
** This config item defines the maximum number of switch events
** per switch that is defined in the dm_switch_array[].
*/

#define  DM_SWITCH_MAX_EVENTS_PER_ENTRY    (2)

/*
**
** Define the product specific switch manager event table.
**
** This table MUST be defined in an application source code file.
** DO NOT DEFINE IT HERE IN THE CONFIG FILE!!!
**
** const SWITCH_EVENT_TABLE_ENTRY \
**   dm_switch_array[DM_SWITCH_NUM_ENTRY_IN_CFG_TBL];
**
** typedef struct
** {
**    UINT8 held_time;
**    UINT8 rel_event;
**    UINT8 held_event;
** }SWITCH_EVENT;
**
** typedef struct
** {
**   UINT8 repeat_held_time;
**   UINT8 repeat_time;
**   UINT8 repeat_event;
** } SWITCH_REPEAT_EVENT;
**
** typedef struct
** {
**   BOOLEAN (*switch_active)(void);
**   UINT8   switch_press_callback;
**   UINT8   max_switch_events;
**   UINT8   press_event;
**   SWITCH_EVENT switch_event[DM_SWITCH_MAX_EVENTS_PER_ENTRY];
**   SWITCH_REPEAT_EVENT switch_repeat_event;
** }SWITCH_EVENT_TABLE_ENTRY;
**
** All values in the table are 1 byte in length unless otherwise specified.
** Because of this, you must ensure that the release and held timers defined
** below DO NOT EXCEED 2 BYTE.
**
** BOOLEAN (*switch_active)(void);
** A pointer to a BOOLEAN function that takes no parameters.  It should
** return TRUE if the switch in question is being pressed, else it should
** return FALSE.
**
** UINT8 switch_press_callback;
** Flag indicating whether or not to call as user specified callback function
** when a press event occurs (typically to generate a chime).  If set to 0,
** no function will be called.  If set to 1, a function will be called.
** The function is configured below.
**
** UINT8 max_switch_events;
** The maximum number of switch events for this entry. If no switch events
** are needed, this value should be set to zero and the switch_event entries
** entered as zero's and no events. NOTE: This entry is needed because the
** number of switch events is fixed through the config item
** DM_SWITCH_MAX_EVENTS_PER_ENTRY.  This entry MUST BE set appropriately depending
** on the number of switch events needed for each entry.
**
** UINT8 press_event;
** The event value that should be queued when the switch is initially pressed.
** If no event is needed, this value should be set to the value that indicates
** no event on your product (typically DE_NONE aka 0).
**
** SWITCH_EVENT switch_event[DM_SWITCH_MAX_EVENTS_PER_ENTRY];
** NOTE: !!!ENTRIES MUST BE IN INCREASING ORDER!!!
**
**  UINT8 held_time;
**   The "held_time" is the amount of time that the switch has been held.
**   When the switch has been held for the "held_time" the corresponding
**   "held_event" will be queued. The units for this timer is
**   MAIN_FUNCTION_PERIOD_RATE_IN_MS. If no held event needs to be generated,
**   set this value to 0.  This value must always be less than 65535!!!
**
**  UINT8 rel_event;
**   The event that will be queued when the switch is released at a time less
**   than the corresponding "held_time". When the held time is greater than
**   all "held_time"(s) then the last valid entry's release event "rel_event"
**   will be queued. If no event is needed, this value should be set to the
**   value that indicates no event.
**
**  UINT8 held_event;
**   The event that will be queued when the switch is held for a time equal to
**   the held_time. If no event is needed, this value should be set to the
**   value that indicates no event.
**
** SWITCH_REPEAT_EVENT switch_repeat_event;
**
**  UINT8 repeat_held_time;
**   The "repeat_held_time is the amount of time that the switch has to be held
**   before queuing a "repeat_event".  When the switch has been held for the
**   "repeat_held_time" the corresponding "repeat_event" will be queued.  The
**   units for this timer is MAIN_FUNCTION_PERIOD_RATE_IN_MS.  If no repeat
**   events need to be generated, set this value to 0.  This value must always
**   be less than 65535!!!
**
**  UINT8 repeat_time;
**   The "repeat_time" is the amount of time that the switch has to be held
**   after the initial "repeat_held_time" has expired for queuing a
**   "repeat_event.  When the switch has been held for the "repeat_time" the
**   corresponding "repeat_event" will be queued.  The units for this timer is
**   MAIN_FUNCTION_PERIOD_RATE_IN_MS.  If no repeat events need to be generated,
**   set this value to 0.  This value must always be less than 65535!!!
**
**  UINT8 repeat_event;
**   The "repeat_event" is the event value that will be queued when the switch
**   has been held for the repeat_held_time or repeat_time. If no event is
**   needed, this value should be set to the value that indicates no event.
**
*/

/*
** The following is a Sample configuration.  The sample was initially created
** for testing and therefore may contain configurations that would not make
** sense for a real product.
*/
/*
** If any of the switch press events need a function call (typically to
** initiate a chime), the function to be called must be defined here.
** If you do not require a function call, do not define
** SWITCH_PRESS_DETECTED_FUNCTION and the code for this feature
** will be conditionally compiled out.
**
** The function can be called with and without a parameter, depending
** on the configuration of SWITCH_PRESS_FUNCTION_REQUIRES_INDEX.
** When configured to have a parameter, the parameter will be a UINT8
** which corresponds to the index into the PRODUCT_SPECIFIC_SWITCH_CONFIG
** structure defined above.
**
** #define SWITCH_PRESS_FUNCTION_REQUIRES_INDEX
**
** #define SWITCH_PRESS_DETECTED_FUNCTION()  f_chimes_request_mc_button_chime()
*/

/* 
** Define SWITCH_EVENT_TIMEOUT_USE_DATA_POINTER if the application wants to keep
** the switch event timeouts in seperate memory location. By defining this macro the
** switch event manager will access the timeout data using data pointer.
** If SWITCH_EVENT_TIMEOUT_USE_DATA_POINTER is defined then also define SWITCH_EVENT_PTR_PREFIX
** to configure any compiler or storage specific settings.
**  
** #define SWITCH_EVENT_TIMEOUT_USE_DATA_POINTER
** #define SWITCH_EVENT_PTR_PREFIX
*/
/*#define SWITCH_EVENT_TIMEOUT_USE_DATA_POINTER	 */

#define SWITCH_EVENT_PTR_PREFIX
#define SWITCH_EVENT_TIMEOUT_USE_DATA_POINTER

/*============================================================================
**
** $Revision:   1.2  $
**
**============================================================================
** P V C S    R E V I S I O N    N O T E S
**============================================================================
**
** For each change to this file, be sure to record:
** 1.  Who made the change and when the change was made.
** 2.  Why the change was made and the intended result.
**
** PVCS Rev 1.0   26-3-2010     GYUVAMAT
**
**============================================================================
**
** Revision main\10  05/06/2009	 GBINU
** Added SWITCH_EVENT_TIMEOUT_USE_DATA_POINTER configuration for enabling  
** application to keep the switch event timeout time in seperate memory location
** and configure the address of the seperate memory location in dm_switch_array 
** instead of the timeout values.
**
** Revison main\8   08/30/05 BCRULL
** 1)Updated descriptions for DM_SWITCH_NUM_ENTRY_IN_CFG_TBL and
** DM_SWITCH_MAX_EVENTS_PER_ENTRY config items.
** 2)Changed DM_SWITCH_MAX_NUM_SW_EVENTS to DM_SWITCH_MAX_EVENTS_PER_ENTRY.
** 3)Added note that switch event times must be in increasing order.
** 4)Updated descriptions for repeat_held_time, repeat_time, and repeat_event.
** 5)Added description of the sample switch configuration table.
** 6)Updated the format of the sample configuration table.
**
** Revison main\7   08/25/05 BCRULL
** BSDI00023179 - Made the following modifications:
** 1) Capability to block the events associated with a switch configuration
** through a public interface.
** 2) Ability to support multiple held and release times and events.
** 3) Increase maximum time for switch press and release events. Change nx8
** bits to nx16bits , where n is the periodicity.
**
** Revison main\6   02/14/05 BCRULL
** Updated per review.
**
** Revision main\5 01/07/05 BCRULL
** BSDI00016922 - added support for repeat button event.
**
** ClearCase Rev 1.4  05/04/04 JKANOZA
**
** Added a configuration item called "REPORT_SWITCH_EVENT()"
** so that the user can decide which function to call to post the switch
** event.  This is necessary for users of DMS-02 or DMS-03 that process
** switch events in a different method than DMS-01.
**
**
** PVCS Rev 1.2   10/12/01     JKANOZA
**
** Added a comment to indicate that the held timer configuration value must
** always be less than 254.
**
**
** PVCS Rev 1.1   09/11/01     JKANOZA
**
** Added the ability to have a function (SWITCH_PRESS_DETECTED_FUNCTION)
** called whenever a switch press event is detected.
**
**
** PVCS Rev 1.0   08/29/01     JKANOZA
**
** Initial revision.
**
**==========================================================================*/

/* end of file =============================================================*/

#endif
